<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IOS on Nathan Barta</title><link>https://nathanbarta.com/tags/ios/</link><description>Recent content in IOS on Nathan Barta</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 09 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://nathanbarta.com/tags/ios/index.xml" rel="self" type="application/rss+xml"/><item><title>Notes on AVVideo Compression</title><link>https://nathanbarta.com/p/notes-avvideo-compression/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://nathanbarta.com/p/notes-avvideo-compression/</guid><description>&lt;p>&lt;em>this post is a work in progress (~50% done) &amp;amp; may not be completely factual&lt;/em>&lt;/p>
&lt;h1 id="notes-on-avvideo-compression">Notes on AVVideo Compression
&lt;/h1>&lt;p>Recently I was tasked with fixing and adding new features to a video pipeline. Our app was supposed to record the user and save a compressed file to remote storage, however, our video files were getting corrupted. This post has some helpful information about Apple’s video encoding APIs. Not all information is 100% tested or factual - there is some speculation &amp;amp; I am not super knowledgable about this topic.&lt;/p>
&lt;h2 id="compression-considerations">Compression Considerations
&lt;/h2>&lt;p>Modern compression algorithms take into account spacial (intra-) and temporal (inter-) compression. Spacial compression is similar to text compression, it tries to compress pixels within a frame into the smallest form factor. Temporal compression stores the difference between frames, which means areas of video that don’t change much get stored much more compactly.&lt;/p>
&lt;p>Two of the most common codecs are H264 and H265 (HEVC). They can both technically encode lossless, but the majority of users, including me, choose lossy settings. HEVC can store the same quality video in about 50% of the space as H264, however there are compatibility issues in browsers, so you should evaluate who’s going to be watching your videos, and what capabilities exist. I chose to offer configurations for both codecs. Our videos are stored in mp4 containers with no audio.&lt;/p>
&lt;h2 id="compression-terms">Compression terms
&lt;/h2>&lt;h3 id="bit-rate">Bit Rate
&lt;/h3>&lt;p>Bit rate is the number of bits required to represent one second of video. In our case, one of our configurations was for HD (1080x720) @ 60fps, with a pixel format of 32_BGRA. This means, uncompressed, our video takes about 1080x720x32x60 = 1,492,992,000 (1492.992 mbit/s, ~1.5 Gbit/s). Since the average upload speed is currently ~23 Mbps (&lt;a class="link" href="https://www.speedtest.net/global-index/united-states#fixed%29" target="_blank" rel="noopener"
>https://www.speedtest.net/global-index/united-states#fixed)&lt;/a>, it would take ~65sec to send 1 second of video &amp;amp; a single 26 second video would cost almost 5GB of storage.&lt;/p>
&lt;p>For this reason, we select a bit rate far lower than what’s needed for uncompressed video.&lt;/p>
&lt;p>Bit Rate = # of pixels * FPS * BPP&lt;/p>
&lt;h3 id="bits-per-pixel-bpp">Bits per pixel (BPP)
&lt;/h3>&lt;p>The number of bits to encode a pixel. 3 is considered “visually lossless”, which is a far cry from the 32 we were using in the above example. Selecting a number between 0.05 and 0.1 will have very noticeable differences. Numbers between 0.1 and 3 will usually have diminishing returns.&lt;/p>
&lt;p>Multiplying the bit rate by 0.131072 can give you a loose estimate for the MAX number of MB/s your video will consume.&lt;/p>
&lt;h3 id="keyframes-i-frames">Keyframes (I-Frames)
&lt;/h3>&lt;p>There are multiple types of frames in a video. Keyframes are just a picture. If you were to have all keyframes, the video would only use spacial compression.&lt;/p>
&lt;h3 id="p-frames-and-b-frames">P-Frames and B-Frames
&lt;/h3>&lt;p>These frames are what makes temporal compression work. They represent the differences between frames &amp;amp; are placed between two keyframes.&lt;/p>
&lt;h3 id="group-of-pictures-gop">Group of Pictures (GOP)
&lt;/h3>&lt;p>Distance between two keyframes. I-Frames sandwich a group of P-Frames and B-Frames.&lt;/p>
&lt;h2 id="avvideocompressionpropertieskey">AVVideoCompressionPropertiesKey
&lt;/h2>&lt;p>This section has descriptions of what the basic AVVideoCompressionPropertiesKey’s do, as well as some VideoToolbox keys.&lt;/p>
&lt;p>In my understanding, these settings are often seen as a “suggestion” to the encoder &amp;amp; may not always be followed as expected.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Considerations&lt;/th>
&lt;th>Notes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>AVVideoAverageBitRateKey&lt;/td>
&lt;td>The average bit rate that the encoder will shoot for.&lt;/td>
&lt;td>If this value is set too low &amp;amp; the encoder has no other options to degrade video quality to fit the bitrate target, the encoder will &lt;em>fail&lt;/em> and spit out a corrupt file. Give the encoder options, such as droppable frames, wider max GOP, wider QP (image quality) range. If the encoder is not struggling to fit into the bit rate, it will take up it’s space &amp;amp; return the highest quality video it can.&lt;/td>
&lt;td>Documentation falsely states that this property only applies to H264.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AVVideoExpectedSourceFrameRateKey&lt;/td>
&lt;td>The frame rate of the input device connected to the AVCaptureSession.&lt;/td>
&lt;td>&lt;/td>
&lt;td>AVCaptureSession has basic presets available statically within code, however, there are additional device presets available during runtime (AVCaptureDevice.Format).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AVVideoMaxKeyFrameIntervalKey&lt;/td>
&lt;td>Keyframe interval, aka GOP. 1 = 1th = every frame is a keyframe, 2 = 2nd = every other frame is a keyframe, 3 = 3rd = every third frame is a keyframe, etc…&lt;/td>
&lt;td>Having all keyframes restricts the encoder to spacial compression only. This is MAX key frame interval. If you have extra space in the bitrate, the encoder will pick a smaller GOP (if a large GOP is a limiting factor to your video quality.) Setting the GOP too small can lead to blurry video because if the encoder is in a crunch, it will degrade QP.&lt;/td>
&lt;td>Most encoders use a GOP length of 1-2 seconds, aka 30-60 frames @ 30fps, or 60-120 fps @60fps. &lt;a class="link" href="https://openradar.appspot.com/FB7528508" target="_blank" rel="noopener"
>Default settings may differ in H264 &amp;amp; HEVC&lt;/a>. Documentation falsely states that this property only applies to H264.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Maxing out MapKit: Optimizing map views for high performance</title><link>https://nathanbarta.com/p/maxing-out-mapkit/</link><pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate><guid>https://nathanbarta.com/p/maxing-out-mapkit/</guid><description>&lt;p>All changes require minimal code changes and boost performance substantially. This is not a tutorial on how to use a map view.&lt;/p>
&lt;h2 id="dequeue">Dequeue
&lt;/h2>&lt;p>If you are looking at this blog, there is a high chance you already know the following optimization.&lt;/p>
&lt;p>Map Views are set up very similarly to Table Views from an interface perspective. Developers should make sure they dequeue MKMapAnnotations.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">mapView&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="n">mapView&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">MKMapView&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">viewFor&lt;/span> &lt;span class="n">annotation&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">MKAnnotation&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="n">MKAnnotationView&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">annotationView&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">mapView&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dequeueReusableAnnotationView&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">withIdentifier&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">annotation&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// &amp;lt;- important&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">annotationView&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">canShowCallout&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">annotationView&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">annotation&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">annotation&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">annotationView&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This simple change lets the map view reuse annotation views when they move offscreen. The performance gained from this system is crucial for keeping the map scrolling smoothly when there are large quantities of annotations. As a tradeoff, this optimization will increase the memory used, but it is generally considered best practice.&lt;/p>
&lt;h2 id="annotation-callouts">Annotation Callouts
&lt;/h2>&lt;p>Typically, developers choose to add callout accessory views inside mapView(viewFor:), however this is actually a critical memory mistake since accessory view creation is not &lt;code>lazy&lt;/code>. Unless there is some special reason you need to create your accessory view inside mapView(viewFor:), you should instead create it in mapView(didSelect:).&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Performance testing results (Physical iPad pro 11inch iOS 14.6, restarted after each run):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 10k trials: 29mb in savings&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 100k trials: 92.8mb in savings + considerably shorter launch time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">mapView&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="n">mapView&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">MKMapView&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">didSelect&lt;/span> &lt;span class="n">view&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">MKAnnotationView&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">view&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rightCalloutAccessoryView&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">UIButton&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="clustering-annotation-views">Clustering Annotation Views
&lt;/h2>&lt;p>Clustering annotation views is a great way of reducing the number of annotations being rendered on screen - it should be used in almost all scenarios. Benefits from this optimization greatly outweigh the previous two optimizations in most scenarios. There are many great tutorials on clustering, so I won’t dive into it in this post.&lt;/p>
&lt;h2 id="caching-user-location">Caching User Location
&lt;/h2>&lt;p>Unless you need real time updating information, you should not be using &lt;code>mapView.showsUserLocation = true&lt;/code>, because it consumes a lot of energy (in my tests it was consuming ~10% of CPU.)&lt;/p>
&lt;p>Instead, cache a pin and update it’s location manually.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">private&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">locationManager&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">CLLocationManager&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">private&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nv">userPin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">MKPointAnnotation&lt;/span>&lt;span class="p">?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">locationManager&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="n">manager&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">CLLocationManager&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">didUpdateLocations&lt;/span> &lt;span class="n">locations&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">CLLocation&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">userPin&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mapView&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">removeAnnotation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">userPin&lt;/span>&lt;span class="p">!)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">newUserPin&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">MKPointAnnotation&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">newUserPin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">coordinate&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">center&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">userPin&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">newUserPin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kc">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mapView&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addAnnotation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">userPin&lt;/span>&lt;span class="p">!)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Devices iOS 14+ are compatible with a manually placed “default” user location pin - devices bellow iOS 14 are stuck with whatever you come up with.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">mapView&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="n">mapView&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">MKMapView&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">viewFor&lt;/span> &lt;span class="n">annotation&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">MKAnnotation&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="n">MKAnnotationView&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">annotation&lt;/span> &lt;span class="p">===&lt;/span> &lt;span class="n">userPin&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// note the operator here&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="cp">#available&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="cp">iOS&lt;/span> &lt;span class="mf">14.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// most devices get this nice pin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">v&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="cp">MKUserLocationView&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="cp">annotation&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="cp">annotation&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cp">reuseIdentifier&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;upin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">zPriority&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="bp">max&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">isEnabled&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">isOpaque&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">v&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">v&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">MKMarkerAnnotationView&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">annotation&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">annotation&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">reuseIdentifier&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;upin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">glyphImage&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">UIImage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">systemName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;person.circle.fill&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">isEnabled&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">isOpaque&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">v&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="getting-memory-to-release">Getting Memory to Release
&lt;/h2>&lt;p>The biggest problem with map views is that they never release their memory. Apps using map views will often balloon to hundreds of mb of memory within a few scrolls. This memory will then refuse to be released, damaging the performance of the rest of the app/device. Unfortunately there is no &lt;code>mapView.clearCache()&lt;/code> function, so we will have to do it ourselves.&lt;/p>
&lt;p>The solution is to create the map view programmatically, and delete/recreate when necessary. This optimization is highly application specific, so I leave it to the reader.&lt;/p></description></item><item><title>My Favorite Swift/iOS/MacOS Resources</title><link>https://nathanbarta.com/p/my-favorites/</link><pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate><guid>https://nathanbarta.com/p/my-favorites/</guid><description>&lt;p>&lt;em>this page got corrupted&amp;hellip; I&amp;rsquo;ll fix it eventually&lt;/em>&lt;/p>
&lt;h1 id="resources">Resources
&lt;/h1>&lt;p>Originally written for the #swift-dev branch of PittCSC&lt;/p>
&lt;h2 id="iosmacos-application-development--swift">iOS/MacOS Application Development &amp;amp; Swift
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Topics&lt;/th>
&lt;th>Post Frequency&lt;/th>
&lt;th>Reading-level&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://www.swiftbysundell.com/" target="_blank" rel="noopener"
>Swift by Sundell&lt;/a>&lt;/td>
&lt;td>Articles, Tutorials, Swift&lt;/td>
&lt;td>Frequent&lt;/td>
&lt;td>Beginner-Advanced&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://useyourloaf.com/archives/" target="_blank" rel="noopener"
>UseYourLoaf&lt;/a>&lt;/td>
&lt;td>Debugging, testing, assorted&lt;/td>
&lt;td>Weekly&lt;/td>
&lt;td>Intermediate-Advanced&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://www.hackingwithswift.com/articles" target="_blank" rel="noopener"
>HackingWithSwift&lt;/a>&lt;/td>
&lt;td>Tutorials, career&lt;/td>
&lt;td>Occasional&lt;/td>
&lt;td>Beginner&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://theswiftdev.com/" target="_blank" rel="noopener"
>TheSwiftDev&lt;/a>&lt;/td>
&lt;td>Tutorials, Vapor, SPM, design patterns, assorted&lt;/td>
&lt;td>Every other week&lt;/td>
&lt;td>Intermediate - Advanced&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SwiftRocks&lt;/td>
&lt;td>Deployment, security, internals&lt;/td>
&lt;td>Monthly… sometimes&lt;/td>
&lt;td>Advanced&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RDerik&lt;/td>
&lt;td>Security, environment&lt;/td>
&lt;td>Monthly… sometimes&lt;/td>
&lt;td>Advanced&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Donny Wals&lt;/td>
&lt;td>Data, JSON, Combine&lt;/td>
&lt;td>Every other week&lt;/td>
&lt;td>Intermediate - Advanced&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Dave DeLong&lt;/td>
&lt;td>HTTP with Swift, compiler&lt;/td>
&lt;td>Monthly… sometimes&lt;/td>
&lt;td>Beginner - Advanced&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TheAtomicBirdhouse&lt;/td>
&lt;td>Assorted, CloudKit&lt;/td>
&lt;td>Monthly… sometimes&lt;/td>
&lt;td>Intermediate - Advanced&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iOSGoodies&lt;/td>
&lt;td>Newsletter, shoutouts&lt;/td>
&lt;td>Weekly&lt;/td>
&lt;td>Beginner - Advanced&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AndyIbanez&lt;/td>
&lt;td>Assorted&lt;/td>
&lt;td>Weekly&lt;/td>
&lt;td>Beginner - Advanced&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DanielSaidi&lt;/td>
&lt;td>SPM&lt;/td>
&lt;td>Monthly… sometimes&lt;/td>
&lt;td>Beginner - Advanced&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RayWenderlich&lt;/td>
&lt;td>Tutorials&lt;/td>
&lt;td>Weekly&lt;/td>
&lt;td>Beginner - Advanced&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Swiftjectivec&lt;/td>
&lt;td>Tutorials&lt;/td>
&lt;td>Frequent&lt;/td>
&lt;td>Beginner-Advanced&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Erica Sadun Assorted Occasional Intermediate-Advanced&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Igor Kulman Tutorials Monthly Intermediate-Advanced&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SarunW Tutorials Almost daily Beginner-Advanced&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Belkadan Software Articles, Low-Level, Swift Monthly Beginner-Advanced&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item></channel></rss>